// Initialize Server + Socket
let agent = navigator.userAgent;
var socket = io();
var id;

let users = {}
let user_count = 0
let server_graph = {}
let user_id = null;

// ----------------------- Socket.io Events -----------------------
socket.on("connect", () => {
  console.log("socket connected!");
});

socket.on("userUpdate", (u) => {
  users=u.users;
  user_count = u.count;
})

// When a new user connects to the server
socket.on("newUserEvent", (n) => {
  console.log("New User Conneted!");
})

// Gets the device user agent to set the linetype
// (mobile --> dashed)
// (desktop --> solid)
socket.on("getUserAgent", () => {
  socket.emit('setUserAgent', agent);
});

socket.on("yourID", (id) => {
  user_id = id;
  console.log(`Your ID: ${user_id}`);
});

// When a user's position is updated, send the new server graph
socket.on("serverGraphUpdate", (s) => {
  server_graph=s;
})

// ----------------------- p5 helper functions -----------------------

function togglePopup() {
  if (infoDiv.style('display') === 'none') {
      infoDiv.show();
  } else {
      infoDiv.hide();
  }
}

function sendMouseUpdateToServer() {
  socket.emit('mouseUpdate', {
    x: mouseX,
    y: mouseY,
    screenWidth: windowWidth,
    screenHeight: windowHeight,
  })
}

let infoBtn, infoDiv, infoTitle, infoP, infoLink;
function setupHTMLElements() {
  createCanvas(windowWidth, windowHeight);

  infoBtn = createButton("?");
  infoBtn.position(windowWidth - 40, 20);
  infoBtn.mousePressed(togglePopup);

  infoDiv = createDiv();
  infoDiv.style('background', 'white');
  infoDiv.style('text-align', 'center');
  infoDiv.style('padding', '20px');
  infoDiv.style('border', '1px solid #666');
  infoDiv.style('width', '80vw');
  infoDiv.style('max-width', '600px');
  infoDiv.style('height', 'auto');
  infoDiv.style('max-height', '80vh');
  infoDiv.style('overflow-y', 'auto');  // Changed from 'scroll' to make scrollbar appear only when needed
  infoDiv.style('position', 'fixed');
  infoDiv.style('top', '50%');  // Add these to center the div
  infoDiv.style('left', '50%');
  infoDiv.style('transform', 'translate(-50%, -50%)');
  infoDiv.hide();


  infoTitle = createElement('h1', 'Connections');
  infoTitle.parent(infoDiv);

  infoParagraph = createP(projectText);
  infoParagraph.style('text-align', 'left');
  infoParagraph.parent(infoDiv);

}

function drawUI() {
  noStroke();
  fill(0);
  let count_string = user_count == 1 ? 
    `${user_count} active user` :
    `${user_count} active users`;
  textAlign(RIGHT);
  text(count_string, windowWidth-20, windowHeight-20);
  textAlign(LEFT);
  // textSize(32);
  // text("Connections", 20, 40);
  textSize(12);
}

function drawServerGraphAndUsers() {
  for (let u in users) {
    // If the server, just draw in the middle of the screen
    // proceed to the rest of the nodes in the user graph
    fill(0);
    if(u == 'SERVER') {
      noStroke();
      textAlign(CENTER);
      text(users[u].screenName, windowWidth/2, windowHeight/2);
      continue
    }

    // Calculate the user's screen positional ratio to place them correctly on
    // the screen. This may not work as intended but worth a try.
    userXRatio = users[u].x / users[u].screenWidth;
    userYRatio = users[u].y / users[u].screenHeight;
    x_pos = userXRatio * windowWidth;
    y_pos = userYRatio * windowHeight;

    // Draw lines between users and server
    stroke(180);
    linetype = users[u].deviceType == 'smartphone' ? [5, 15] : []; // dashed line if smartphone
    drawingContext.setLineDash(linetype);
    line(windowWidth/2, windowHeight/2, x_pos, y_pos)

    // Draw each user and list their IP path below their name
    noStroke();
    textAlign(LEFT);
    text(users[u].screenName, x_pos, y_pos);
    // TODO: pre-build multi-line string to keep for loop out of draw()
  }
  
  if(user_id && users[user_id]) {
    console.log("User exists");

    // List the user's IP path at the bottom of the screen
    for(let i=0; i<users[user_id].path.length; i++){
      fill(140);
      text(users[user_id].path[i], 0, windowHeight - (12 * (1+i)) - 20);
    }
  }

}

// ----------------------- Set up p5 sketch -----------------------

let projectText = `In the pursuit of frictionless technology we have abstracted away the underlying infrastructure powering our world. Instant messaging, video calling, online gaming, and realtime streaming all introduce interaction models that attempt to replicate an idea of shared presence similar to how its experienced in the real world. <br><br>

Through this project, the visitor experiences shared presence while replicating the underlying network topology that makes the experience possible. By interacting with the screen, the user explores ideas of connection through modeling the physical connection of digital devices.<br><br>

This project takes inspiration from various interactive web experiences, specifically the work of pioneers in this space like Myron Kruger's VIDEOPLACE. Similar to Myron, this project attempts to explore how technology can be a medium for connection by replicating a user's identity and modeling shared space in a way that feels tangible.`

function setup() {
  createCanvas(windowWidth, windowHeight);
  setupHTMLElements();
  sendMouseUpdateToServer();
}

let lastUpdate = 0;

function draw() {
  const now = Date.now();
  if(now - lastUpdate > 50) {
    sendMouseUpdateToServer();
    lastUpdate = now;
  }

  background(230);
  drawUI();
  drawServerGraphAndUsers()
}
